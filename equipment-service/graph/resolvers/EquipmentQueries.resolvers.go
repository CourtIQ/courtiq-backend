package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"

	"github.com/CourtIQ/courtiq-backend/equipment-service/graph"
	"github.com/CourtIQ/courtiq-backend/equipment-service/graph/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// MyTennisRacket is the resolver for the myTennisRacket field.
func (r *queryResolver) MyTennisRacket(ctx context.Context, id primitive.ObjectID) (*model.TennisRacket, error) {
	return r.EquipmentServiceIntf.FindTennisRacketByID(ctx, id)
}

// MyStringHistory is the resolver for the myStringHistory field.
func (r *queryResolver) MyStringHistory(ctx context.Context, racket primitive.ObjectID) ([]*model.TennisString, error) {
	panic(fmt.Errorf("not implemented: MyStringHistory - myStringHistory"))
}

// MyTennisString is the resolver for the myTennisString field.
func (r *queryResolver) MyTennisString(ctx context.Context, id primitive.ObjectID) (*model.TennisString, error) {
	return r.EquipmentServiceIntf.FindTennisStringByID(ctx, id)
}

// MyEquipment is the resolver for the myEquipment field.
func (r *queryResolver) MyEquipment(ctx context.Context, limit *int, offset *int) ([]model.Equipment, error) {
	return r.EquipmentServiceIntf.MyEquipment(ctx, limit, offset)
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
