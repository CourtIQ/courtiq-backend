// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type MatchUp struct {
	ID                          primitive.ObjectID   `json:"id" bson:"_id"`
	MatchUpFormat               *MatchUpFormat       `json:"matchUpFormat" bson:"matchUpFormat"`
	MatchUpStatus               MatchUpStatus        `json:"matchUpStatus" bson:"matchUpStatus"`
	MatchUpType                 MatchUpType          `json:"matchUpType" bson:"matchUpType"`
	ParticipantIds              []primitive.ObjectID `json:"participantIds" bson:"participantIds"`
	Participants                *ParticipantsMap     `json:"participants" bson:"participants"`
	CurrentSetIndex             *int                 `json:"currentSetIndex,omitempty" bson:"currentSetIndex,omitempty"`
	CurrentGameIndexWithinSet   *int                 `json:"currentGameIndexWithinSet,omitempty" bson:"currentGameIndexWithinSet,omitempty"`
	CurrentPointIndexWithinGame *int                 `json:"currentPointIndexWithinGame,omitempty" bson:"currentPointIndexWithinGame,omitempty"`
	CurrentScore                *Score               `json:"currentScore,omitempty" bson:"currentScore,omitempty"`
	CurrentServer               primitive.ObjectID   `json:"currentServer" bson:"currentServer"`
	PointsSequence              []primitive.ObjectID `json:"pointsSequence" bson:"pointsSequence"`
	StartTime                   time.Time            `json:"startTime" bson:"startTime"`
	EndTime                     *time.Time           `json:"endTime,omitempty" bson:"endTime,omitempty"`
	CreatedAt                   time.Time            `json:"createdAt" bson:"createdAt"`
	UpdatedAt                   time.Time            `json:"updatedAt" bson:"updatedAt"`
}

type MatchUpFormat struct {
	ID             primitive.ObjectID `json:"id" bson:"_id"`
	Tracker        primitive.ObjectID `json:"tracker" bson:"tracker"`
	NumberOfSets   NumberOfSets       `json:"numberOfSets" bson:"numberOfSets"`
	SetFormat      *SetFormat         `json:"setFormat" bson:"setFormat"`
	FinalSetFormat *SetFormat         `json:"finalSetFormat,omitempty" bson:"finalSetFormat,omitempty"`
	InitialServer  PlayingSide        `json:"initialServer" bson:"initialServer"`
}

type MatchUpFormatInput struct {
	Tracker        primitive.ObjectID `json:"tracker" bson:"tracker"`
	NumberOfSets   NumberOfSets       `json:"numberOfSets" bson:"numberOfSets"`
	SetFormat      *SetFormatInput    `json:"setFormat" bson:"setFormat"`
	FinalSetFormat *SetFormatInput    `json:"finalSetFormat,omitempty" bson:"finalSetFormat,omitempty"`
}

type Mutation struct {
}

type ParticipantsMap struct {
	A primitive.ObjectID `json:"A" bson:"A"`
	B primitive.ObjectID `json:"B" bson:"B"`
}

type Point struct {
	ID                   primitive.ObjectID `json:"id" bson:"_id"`
	SetIndex             int                `json:"setIndex" bson:"setIndex"`
	GameIndexWithinSet   int                `json:"gameIndexWithinSet" bson:"gameIndexWithinSet"`
	PointIndexWithinGame int                `json:"pointIndexWithinGame" bson:"pointIndexWithinGame"`
	IsTiebreak           bool               `json:"isTiebreak" bson:"isTiebreak"`
	TiebreakPointNumber  *int               `json:"tiebreakPointNumber,omitempty" bson:"tiebreakPointNumber,omitempty"`
	PointWinner          primitive.ObjectID `json:"pointWinner" bson:"pointWinner"`
	PointServer          primitive.ObjectID `json:"pointServer" bson:"pointServer"`
	PointWinReason       *PointWinReason    `json:"pointWinReason,omitempty" bson:"pointWinReason,omitempty"`
	PlayingSide          PlayingSide        `json:"playingSide" bson:"playingSide"`
	CourtSide            CourtSide          `json:"courtSide" bson:"courtSide"`
	ScoreBefore          *Score             `json:"scoreBefore" bson:"scoreBefore"`
	ScoreAfter           *Score             `json:"scoreAfter" bson:"scoreAfter"`
	Shots                []*Shot            `json:"shots" bson:"shots"`
	IsBreakPoint         bool               `json:"isBreakPoint" bson:"isBreakPoint"`
	IsGamePoint          bool               `json:"isGamePoint" bson:"isGamePoint"`
	IsSetPoint           bool               `json:"isSetPoint" bson:"isSetPoint"`
	IsMatchPoint         bool               `json:"isMatchPoint" bson:"isMatchPoint"`
	PlayedAt             *time.Time         `json:"playedAt,omitempty" bson:"playedAt,omitempty"`
}

type Query struct {
}

type Score struct {
	A *SideScore `json:"a" bson:"a"`
	B *SideScore `json:"b" bson:"b"`
}

type SetFormat struct {
	NumberOfGames  NumberOfGames   `json:"numberOfGames" bson:"numberOfGames"`
	DeuceType      DeuceType       `json:"deuceType" bson:"deuceType"`
	MustWinByTwo   bool            `json:"mustWinByTwo" bson:"mustWinByTwo"`
	TiebreakFormat *TiebreakFormat `json:"tiebreakFormat,omitempty" bson:"tiebreakFormat,omitempty"`
	TiebreakAt     *int            `json:"tiebreakAt,omitempty" bson:"tiebreakAt,omitempty"`
}

type SetFormatInput struct {
	NumberOfGames  NumberOfGames        `json:"numberOfGames" bson:"numberOfGames"`
	DeuceType      DeuceType            `json:"deuceType" bson:"deuceType"`
	MustWinByTwo   bool                 `json:"mustWinByTwo" bson:"mustWinByTwo"`
	TiebreakFormat *TiebreakFormatInput `json:"tiebreakFormat,omitempty" bson:"tiebreakFormat,omitempty"`
	TiebreakAt     *int                 `json:"tiebreakAt,omitempty" bson:"tiebreakAt,omitempty"`
}

type Shot struct {
	PlayerID          primitive.ObjectID `json:"playerId" bson:"playerId"`
	ShotType          ShotType           `json:"shotType" bson:"shotType"`
	ServeStyle        *ServeStyle        `json:"serveStyle,omitempty" bson:"serveStyle,omitempty"`
	GroundStrokeType  *GroundStrokeType  `json:"groundStrokeType,omitempty" bson:"groundStrokeType,omitempty"`
	GroundStrokeStyle *GroundStrokeStyle `json:"groundStrokeStyle,omitempty" bson:"groundStrokeStyle,omitempty"`
	PlayedAt          *time.Time         `json:"playedAt,omitempty" bson:"playedAt,omitempty"`
}

type SideScore struct {
	Player               primitive.ObjectID `json:"player" bson:"player"`
	CurrentPointScore    GameScore          `json:"currentPointScore" bson:"currentPointScore"`
	CurrentGameScore     int                `json:"currentGameScore" bson:"currentGameScore"`
	CurrentSetScore      int                `json:"currentSetScore" bson:"currentSetScore"`
	CurrentTiebreakScore *int               `json:"currentTiebreakScore,omitempty" bson:"currentTiebreakScore,omitempty"`
}

type TiebreakFormat struct {
	Points       TiebreakPoints `json:"points" bson:"points"`
	MustWinByTwo bool           `json:"mustWinByTwo" bson:"mustWinByTwo"`
}

type TiebreakFormatInput struct {
	Points       TiebreakPoints `json:"points" bson:"points"`
	MustWinByTwo bool           `json:"mustWinByTwo" bson:"mustWinByTwo"`
}

type CourtSide string

const (
	CourtSideLeft  CourtSide = "LEFT"
	CourtSideRight CourtSide = "RIGHT"
)

var AllCourtSide = []CourtSide{
	CourtSideLeft,
	CourtSideRight,
}

func (e CourtSide) IsValid() bool {
	switch e {
	case CourtSideLeft, CourtSideRight:
		return true
	}
	return false
}

func (e CourtSide) String() string {
	return string(e)
}

func (e *CourtSide) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CourtSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CourtSide", str)
	}
	return nil
}

func (e CourtSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeuceType string

const (
	DeuceTypeSuddenDeath DeuceType = "SUDDEN_DEATH"
	DeuceTypeNormalDeuce DeuceType = "NORMAL_DEUCE"
	DeuceTypeOneDeuce    DeuceType = "ONE_DEUCE"
)

var AllDeuceType = []DeuceType{
	DeuceTypeSuddenDeath,
	DeuceTypeNormalDeuce,
	DeuceTypeOneDeuce,
}

func (e DeuceType) IsValid() bool {
	switch e {
	case DeuceTypeSuddenDeath, DeuceTypeNormalDeuce, DeuceTypeOneDeuce:
		return true
	}
	return false
}

func (e DeuceType) String() string {
	return string(e)
}

func (e *DeuceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeuceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeuceType", str)
	}
	return nil
}

func (e DeuceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GameScore string

const (
	GameScoreLove      GameScore = "LOVE"
	GameScoreFifteen   GameScore = "FIFTEEN"
	GameScoreThirty    GameScore = "THIRTY"
	GameScoreForty     GameScore = "FORTY"
	GameScoreAdvantage GameScore = "ADVANTAGE"
)

var AllGameScore = []GameScore{
	GameScoreLove,
	GameScoreFifteen,
	GameScoreThirty,
	GameScoreForty,
	GameScoreAdvantage,
}

func (e GameScore) IsValid() bool {
	switch e {
	case GameScoreLove, GameScoreFifteen, GameScoreThirty, GameScoreForty, GameScoreAdvantage:
		return true
	}
	return false
}

func (e GameScore) String() string {
	return string(e)
}

func (e *GameScore) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameScore(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameScore", str)
	}
	return nil
}

func (e GameScore) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroundStrokeStyle string

const (
	GroundStrokeStyleSlice       GroundStrokeStyle = "SLICE"
	GroundStrokeStyleTopspin     GroundStrokeStyle = "TOPSPIN"
	GroundStrokeStyleFlat        GroundStrokeStyle = "FLAT"
	GroundStrokeStyleLob         GroundStrokeStyle = "LOB"
	GroundStrokeStyleDropShot    GroundStrokeStyle = "DROP_SHOT"
	GroundStrokeStyleCrosscourt  GroundStrokeStyle = "CROSSCOURT"
	GroundStrokeStyleDownTheLine GroundStrokeStyle = "DOWN_THE_LINE"
	GroundStrokeStyleSmash       GroundStrokeStyle = "SMASH"
)

var AllGroundStrokeStyle = []GroundStrokeStyle{
	GroundStrokeStyleSlice,
	GroundStrokeStyleTopspin,
	GroundStrokeStyleFlat,
	GroundStrokeStyleLob,
	GroundStrokeStyleDropShot,
	GroundStrokeStyleCrosscourt,
	GroundStrokeStyleDownTheLine,
	GroundStrokeStyleSmash,
}

func (e GroundStrokeStyle) IsValid() bool {
	switch e {
	case GroundStrokeStyleSlice, GroundStrokeStyleTopspin, GroundStrokeStyleFlat, GroundStrokeStyleLob, GroundStrokeStyleDropShot, GroundStrokeStyleCrosscourt, GroundStrokeStyleDownTheLine, GroundStrokeStyleSmash:
		return true
	}
	return false
}

func (e GroundStrokeStyle) String() string {
	return string(e)
}

func (e *GroundStrokeStyle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroundStrokeStyle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroundStrokeStyle", str)
	}
	return nil
}

func (e GroundStrokeStyle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroundStrokeType string

const (
	GroundStrokeTypeForehand GroundStrokeType = "FOREHAND"
	GroundStrokeTypeBackhand GroundStrokeType = "BACKHAND"
)

var AllGroundStrokeType = []GroundStrokeType{
	GroundStrokeTypeForehand,
	GroundStrokeTypeBackhand,
}

func (e GroundStrokeType) IsValid() bool {
	switch e {
	case GroundStrokeTypeForehand, GroundStrokeTypeBackhand:
		return true
	}
	return false
}

func (e GroundStrokeType) String() string {
	return string(e)
}

func (e *GroundStrokeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroundStrokeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroundStrokeType", str)
	}
	return nil
}

func (e GroundStrokeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchUpStatus string

const (
	MatchUpStatusScheduled  MatchUpStatus = "SCHEDULED"
	MatchUpStatusInProgress MatchUpStatus = "IN_PROGRESS"
	MatchUpStatusCompleted  MatchUpStatus = "COMPLETED"
	MatchUpStatusSuspended  MatchUpStatus = "SUSPENDED"
	MatchUpStatusCancelled  MatchUpStatus = "CANCELLED"
	MatchUpStatusAbandoned  MatchUpStatus = "ABANDONED"
	MatchUpStatusRetired    MatchUpStatus = "RETIRED"
	MatchUpStatusRequested  MatchUpStatus = "REQUESTED"
)

var AllMatchUpStatus = []MatchUpStatus{
	MatchUpStatusScheduled,
	MatchUpStatusInProgress,
	MatchUpStatusCompleted,
	MatchUpStatusSuspended,
	MatchUpStatusCancelled,
	MatchUpStatusAbandoned,
	MatchUpStatusRetired,
	MatchUpStatusRequested,
}

func (e MatchUpStatus) IsValid() bool {
	switch e {
	case MatchUpStatusScheduled, MatchUpStatusInProgress, MatchUpStatusCompleted, MatchUpStatusSuspended, MatchUpStatusCancelled, MatchUpStatusAbandoned, MatchUpStatusRetired, MatchUpStatusRequested:
		return true
	}
	return false
}

func (e MatchUpStatus) String() string {
	return string(e)
}

func (e *MatchUpStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchUpStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchUpStatus", str)
	}
	return nil
}

func (e MatchUpStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchUpType string

const (
	MatchUpTypeSingles MatchUpType = "SINGLES"
	MatchUpTypeDoubles MatchUpType = "DOUBLES"
)

var AllMatchUpType = []MatchUpType{
	MatchUpTypeSingles,
	MatchUpTypeDoubles,
}

func (e MatchUpType) IsValid() bool {
	switch e {
	case MatchUpTypeSingles, MatchUpTypeDoubles:
		return true
	}
	return false
}

func (e MatchUpType) String() string {
	return string(e)
}

func (e *MatchUpType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchUpType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchUpType", str)
	}
	return nil
}

func (e MatchUpType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NumberOfGames string

const (
	NumberOfGamesOne   NumberOfGames = "ONE"
	NumberOfGamesThree NumberOfGames = "THREE"
	NumberOfGamesFour  NumberOfGames = "FOUR"
	NumberOfGamesFive  NumberOfGames = "FIVE"
	NumberOfGamesSix   NumberOfGames = "SIX"
	NumberOfGamesTen   NumberOfGames = "TEN"
)

var AllNumberOfGames = []NumberOfGames{
	NumberOfGamesOne,
	NumberOfGamesThree,
	NumberOfGamesFour,
	NumberOfGamesFive,
	NumberOfGamesSix,
	NumberOfGamesTen,
}

func (e NumberOfGames) IsValid() bool {
	switch e {
	case NumberOfGamesOne, NumberOfGamesThree, NumberOfGamesFour, NumberOfGamesFive, NumberOfGamesSix, NumberOfGamesTen:
		return true
	}
	return false
}

func (e NumberOfGames) String() string {
	return string(e)
}

func (e *NumberOfGames) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NumberOfGames(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NumberOfGames", str)
	}
	return nil
}

func (e NumberOfGames) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NumberOfSets string

const (
	NumberOfSetsOne   NumberOfSets = "ONE"
	NumberOfSetsThree NumberOfSets = "THREE"
	NumberOfSetsFive  NumberOfSets = "FIVE"
)

var AllNumberOfSets = []NumberOfSets{
	NumberOfSetsOne,
	NumberOfSetsThree,
	NumberOfSetsFive,
}

func (e NumberOfSets) IsValid() bool {
	switch e {
	case NumberOfSetsOne, NumberOfSetsThree, NumberOfSetsFive:
		return true
	}
	return false
}

func (e NumberOfSets) String() string {
	return string(e)
}

func (e *NumberOfSets) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NumberOfSets(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NumberOfSets", str)
	}
	return nil
}

func (e NumberOfSets) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlayingSide string

const (
	PlayingSideDeuce PlayingSide = "DEUCE"
	PlayingSideAd    PlayingSide = "AD"
)

var AllPlayingSide = []PlayingSide{
	PlayingSideDeuce,
	PlayingSideAd,
}

func (e PlayingSide) IsValid() bool {
	switch e {
	case PlayingSideDeuce, PlayingSideAd:
		return true
	}
	return false
}

func (e PlayingSide) String() string {
	return string(e)
}

func (e *PlayingSide) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlayingSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlayingSide", str)
	}
	return nil
}

func (e PlayingSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PointWinReason string

const (
	PointWinReasonAce           PointWinReason = "ACE"
	PointWinReasonWinner        PointWinReason = "WINNER"
	PointWinReasonForcedError   PointWinReason = "FORCED_ERROR"
	PointWinReasonUnforcedError PointWinReason = "UNFORCED_ERROR"
	PointWinReasonDoubleFault   PointWinReason = "DOUBLE_FAULT"
)

var AllPointWinReason = []PointWinReason{
	PointWinReasonAce,
	PointWinReasonWinner,
	PointWinReasonForcedError,
	PointWinReasonUnforcedError,
	PointWinReasonDoubleFault,
}

func (e PointWinReason) IsValid() bool {
	switch e {
	case PointWinReasonAce, PointWinReasonWinner, PointWinReasonForcedError, PointWinReasonUnforcedError, PointWinReasonDoubleFault:
		return true
	}
	return false
}

func (e PointWinReason) String() string {
	return string(e)
}

func (e *PointWinReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PointWinReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PointWinReason", str)
	}
	return nil
}

func (e PointWinReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServeStyle string

const (
	ServeStyleFlat  ServeStyle = "FLAT"
	ServeStyleKick  ServeStyle = "KICK"
	ServeStyleSlice ServeStyle = "SLICE"
	ServeStyleOther ServeStyle = "OTHER"
)

var AllServeStyle = []ServeStyle{
	ServeStyleFlat,
	ServeStyleKick,
	ServeStyleSlice,
	ServeStyleOther,
}

func (e ServeStyle) IsValid() bool {
	switch e {
	case ServeStyleFlat, ServeStyleKick, ServeStyleSlice, ServeStyleOther:
		return true
	}
	return false
}

func (e ServeStyle) String() string {
	return string(e)
}

func (e *ServeStyle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServeStyle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServeStyle", str)
	}
	return nil
}

func (e ServeStyle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShotType string

const (
	ShotTypeServe        ShotType = "SERVE"
	ShotTypeGroundStroke ShotType = "GROUND_STROKE"
	ShotTypeVolley       ShotType = "VOLLEY"
)

var AllShotType = []ShotType{
	ShotTypeServe,
	ShotTypeGroundStroke,
	ShotTypeVolley,
}

func (e ShotType) IsValid() bool {
	switch e {
	case ShotTypeServe, ShotTypeGroundStroke, ShotTypeVolley:
		return true
	}
	return false
}

func (e ShotType) String() string {
	return string(e)
}

func (e *ShotType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShotType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShotType", str)
	}
	return nil
}

func (e ShotType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TiebreakPoints string

const (
	TiebreakPointsFive  TiebreakPoints = "FIVE"
	TiebreakPointsSix   TiebreakPoints = "SIX"
	TiebreakPointsSeven TiebreakPoints = "SEVEN"
	TiebreakPointsEight TiebreakPoints = "EIGHT"
	TiebreakPointsNine  TiebreakPoints = "NINE"
	TiebreakPointsTen   TiebreakPoints = "TEN"
)

var AllTiebreakPoints = []TiebreakPoints{
	TiebreakPointsFive,
	TiebreakPointsSix,
	TiebreakPointsSeven,
	TiebreakPointsEight,
	TiebreakPointsNine,
	TiebreakPointsTen,
}

func (e TiebreakPoints) IsValid() bool {
	switch e {
	case TiebreakPointsFive, TiebreakPointsSix, TiebreakPointsSeven, TiebreakPointsEight, TiebreakPointsNine, TiebreakPointsTen:
		return true
	}
	return false
}

func (e TiebreakPoints) String() string {
	return string(e)
}

func (e *TiebreakPoints) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TiebreakPoints(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TiebreakPoints", str)
	}
	return nil
}

func (e TiebreakPoints) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Visibility string

const (
	VisibilityPublic  Visibility = "PUBLIC"
	VisibilityPrivate Visibility = "PRIVATE"
	VisibilityFriends Visibility = "FRIENDS"
	VisibilityCoaches Visibility = "COACHES"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityPrivate,
	VisibilityFriends,
	VisibilityCoaches,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityPrivate, VisibilityFriends, VisibilityCoaches:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
