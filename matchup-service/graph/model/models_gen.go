// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Health struct {
	Service   string       `json:"service"`
	Status    HealthStatus `json:"status"`
	Timestamp string       `json:"timestamp"`
}

func (Health) IsEntity() {}

type Query struct {
}

type HealthStatus string

const (
	HealthStatusHealthy   HealthStatus = "HEALTHY"
	HealthStatusUnhealthy HealthStatus = "UNHEALTHY"
	HealthStatusDegraded  HealthStatus = "DEGRADED"
)

var AllHealthStatus = []HealthStatus{
	HealthStatusHealthy,
	HealthStatusUnhealthy,
	HealthStatusDegraded,
}

func (e HealthStatus) IsValid() bool {
	switch e {
	case HealthStatusHealthy, HealthStatusUnhealthy, HealthStatusDegraded:
		return true
	}
	return false
}

func (e HealthStatus) String() string {
	return string(e)
}

func (e *HealthStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthStatus", str)
	}
	return nil
}

func (e HealthStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
