package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"

	"github.com/CourtIQ/courtiq-backend/matchup-service/graph"
	"github.com/CourtIQ/courtiq-backend/matchup-service/graph/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateMatchUp is the resolver for the createMatchUp field.
func (r *mutationResolver) CreateMatchUp(ctx context.Context, matchUpFormatInput model.MatchUpFormatInput, matchUpType model.MatchUpType, participants []primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.CreateMatchUp(ctx, matchUpFormatInput, matchUpType, participants)
}

// UpdateMatchUpStatus is the resolver for the updateMatchUpStatus field.
func (r *mutationResolver) UpdateMatchUpStatus(ctx context.Context, status model.MatchUpStatus, matchUpID primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.UpdateMatchUpStatus(ctx, status, matchUpID)
}

// AddPointToMatchUp is the resolver for the addPointToMatchUp field.
func (r *mutationResolver) AddPointToMatchUp(ctx context.Context, matchUpFormatInput model.MatchUpFormatInput, matchUpID primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.AddPointToMatchUp(ctx, matchUpFormatInput, matchUpID)
}

// UndoShotFromMatchUp is the resolver for the undoShotFromMatchUp field.
func (r *mutationResolver) UndoShotFromMatchUp(ctx context.Context, matchUpID primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.UndoShotFromMatchUp(ctx, matchUpID)
}

// UndoPointFromMatchUp is the resolver for the undoPointFromMatchUp field.
func (r *mutationResolver) UndoPointFromMatchUp(ctx context.Context, matchUpID primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.UndoPointFromMatchUp(ctx, matchUpID)
}

// DeleteMatchUp is the resolver for the deleteMatchUp field.
func (r *mutationResolver) DeleteMatchUp(ctx context.Context, matchUpID primitive.ObjectID) (*model.MatchUp, error) {
	return r.MatchUpServiceIntf.DeleteMatchUp(ctx, matchUpID)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
