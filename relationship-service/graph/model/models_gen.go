// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Relationship interface {
	IsRelationship()
	GetID() string
	GetParticipantIds() []string
	GetType() RelationshipType
	GetStatus() RelationshipStatus
	GetCreatedAt() string
	GetUpdatedAt() *string
	GetMetadata() *RelationshipMetadata
}

type Coachship struct {
	ID             string                `json:"id"`
	ParticipantIds []string              `json:"participantIds"`
	Type           RelationshipType      `json:"type"`
	Status         RelationshipStatus    `json:"status"`
	CreatedAt      string                `json:"createdAt"`
	UpdatedAt      *string               `json:"updatedAt,omitempty"`
	Metadata       *RelationshipMetadata `json:"metadata,omitempty"`
	CoachID        string                `json:"coachId"`
	CoacheeID      string                `json:"coacheeId"`
}

func (Coachship) IsRelationship()    {}
func (this Coachship) GetID() string { return this.ID }
func (this Coachship) GetParticipantIds() []string {
	if this.ParticipantIds == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.ParticipantIds))
	for _, concrete := range this.ParticipantIds {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Coachship) GetType() RelationshipType          { return this.Type }
func (this Coachship) GetStatus() RelationshipStatus      { return this.Status }
func (this Coachship) GetCreatedAt() string               { return this.CreatedAt }
func (this Coachship) GetUpdatedAt() *string              { return this.UpdatedAt }
func (this Coachship) GetMetadata() *RelationshipMetadata { return this.Metadata }

type Friendship struct {
	ID             string                `json:"id"`
	ParticipantIds []string              `json:"participantIds"`
	Type           RelationshipType      `json:"type"`
	Status         RelationshipStatus    `json:"status"`
	CreatedAt      string                `json:"createdAt"`
	UpdatedAt      *string               `json:"updatedAt,omitempty"`
	Metadata       *RelationshipMetadata `json:"metadata,omitempty"`
	RequesterID    string                `json:"requesterId"`
	ReceiverID     string                `json:"receiverId"`
}

func (Friendship) IsRelationship()    {}
func (this Friendship) GetID() string { return this.ID }
func (this Friendship) GetParticipantIds() []string {
	if this.ParticipantIds == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.ParticipantIds))
	for _, concrete := range this.ParticipantIds {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Friendship) GetType() RelationshipType          { return this.Type }
func (this Friendship) GetStatus() RelationshipStatus      { return this.Status }
func (this Friendship) GetCreatedAt() string               { return this.CreatedAt }
func (this Friendship) GetUpdatedAt() *string              { return this.UpdatedAt }
func (this Friendship) GetMetadata() *RelationshipMetadata { return this.Metadata }

type FriendshipsInput struct {
	UserID string              `json:"userId"`
	Status *RelationshipStatus `json:"status,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	Offset *int                `json:"offset,omitempty"`
}

type Query struct {
}

type RelationshipMetadata struct {
	Notes     *string  `json:"notes,omitempty"`
	Tags      []string `json:"tags,omitempty"`
	StartDate *string  `json:"startDate,omitempty"`
	EndDate   *string  `json:"endDate,omitempty"`
}

type RelationshipStatus string

const (
	RelationshipStatusPending  RelationshipStatus = "PENDING"
	RelationshipStatusActive   RelationshipStatus = "ACTIVE"
	RelationshipStatusRejected RelationshipStatus = "REJECTED"
	RelationshipStatusEnded    RelationshipStatus = "ENDED"
)

var AllRelationshipStatus = []RelationshipStatus{
	RelationshipStatusPending,
	RelationshipStatusActive,
	RelationshipStatusRejected,
	RelationshipStatusEnded,
}

func (e RelationshipStatus) IsValid() bool {
	switch e {
	case RelationshipStatusPending, RelationshipStatusActive, RelationshipStatusRejected, RelationshipStatusEnded:
		return true
	}
	return false
}

func (e RelationshipStatus) String() string {
	return string(e)
}

func (e *RelationshipStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationshipStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelationshipStatus", str)
	}
	return nil
}

func (e RelationshipStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelationshipType string

const (
	RelationshipTypeFriendship RelationshipType = "FRIENDSHIP"
	RelationshipTypeCoaching   RelationshipType = "COACHING"
)

var AllRelationshipType = []RelationshipType{
	RelationshipTypeFriendship,
	RelationshipTypeCoaching,
}

func (e RelationshipType) IsValid() bool {
	switch e {
	case RelationshipTypeFriendship, RelationshipTypeCoaching:
		return true
	}
	return false
}

func (e RelationshipType) String() string {
	return string(e)
}

func (e *RelationshipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationshipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelationshipType", str)
	}
	return nil
}

func (e RelationshipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
