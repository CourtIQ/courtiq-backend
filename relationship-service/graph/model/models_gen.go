// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type Relationship interface {
	IsRelationship()
	GetID() primitive.ObjectID
	GetType() RelationshipType
	GetStatus() RelationshipStatus
	GetInitiatorID() primitive.ObjectID
	GetReceiverID() primitive.ObjectID
	GetCreatedAt() time.Time
	GetUpdatedAt() *time.Time
}

type Coachship struct {
	ID          primitive.ObjectID `json:"id" bson:"_id"`
	Type        RelationshipType   `json:"type" bson:"type"`
	Status      RelationshipStatus `json:"status" bson:"status"`
	InitiatorID primitive.ObjectID `json:"initiatorId" bson:"initiatorId"`
	ReceiverID  primitive.ObjectID `json:"receiverId" bson:"receiverId"`
	CreatedAt   time.Time          `json:"createdAt" bson:"createdAt"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty" bson:"updatedAt,omitempty"`
	Coach       primitive.ObjectID `json:"coach" bson:"coach"`
	Student     primitive.ObjectID `json:"student" bson:"student"`
}

func (Coachship) IsRelationship()                         {}
func (this Coachship) GetID() primitive.ObjectID          { return this.ID }
func (this Coachship) GetType() RelationshipType          { return this.Type }
func (this Coachship) GetStatus() RelationshipStatus      { return this.Status }
func (this Coachship) GetInitiatorID() primitive.ObjectID { return this.InitiatorID }
func (this Coachship) GetReceiverID() primitive.ObjectID  { return this.ReceiverID }
func (this Coachship) GetCreatedAt() time.Time            { return this.CreatedAt }
func (this Coachship) GetUpdatedAt() *time.Time           { return this.UpdatedAt }

func (Coachship) IsEntity() {}

type Friendship struct {
	ID          primitive.ObjectID `json:"id" bson:"_id"`
	Type        RelationshipType   `json:"type" bson:"type"`
	Status      RelationshipStatus `json:"status" bson:"status"`
	InitiatorID primitive.ObjectID `json:"initiatorId" bson:"initiatorId"`
	ReceiverID  primitive.ObjectID `json:"receiverId" bson:"receiverId"`
	CreatedAt   time.Time          `json:"createdAt" bson:"createdAt"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty" bson:"updatedAt,omitempty"`
}

func (Friendship) IsRelationship()                         {}
func (this Friendship) GetID() primitive.ObjectID          { return this.ID }
func (this Friendship) GetType() RelationshipType          { return this.Type }
func (this Friendship) GetStatus() RelationshipStatus      { return this.Status }
func (this Friendship) GetInitiatorID() primitive.ObjectID { return this.InitiatorID }
func (this Friendship) GetReceiverID() primitive.ObjectID  { return this.ReceiverID }
func (this Friendship) GetCreatedAt() time.Time            { return this.CreatedAt }
func (this Friendship) GetUpdatedAt() *time.Time           { return this.UpdatedAt }

func (Friendship) IsEntity() {}

// Provides structured geographical details about a user's location.
// All fields are optional and can be omitted if unknown.
type Location struct {
	City      *string  `json:"city,omitempty" bson:"city,omitempty"`
	State     *string  `json:"state,omitempty" bson:"state,omitempty"`
	Country   *string  `json:"country,omitempty" bson:"country,omitempty"`
	Latitude  *float64 `json:"latitude,omitempty" bson:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty" bson:"longitude,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type RelationshipQueries struct {
	GetFriendship *Friendship `json:"getFriendship,omitempty" bson:"getFriendship,omitempty"`
}

type RelationshipStatus string

const (
	RelationshipStatusNone     RelationshipStatus = "NONE"
	RelationshipStatusPending  RelationshipStatus = "PENDING"
	RelationshipStatusAccepted RelationshipStatus = "ACCEPTED"
	RelationshipStatusDeclined RelationshipStatus = "DECLINED"
	RelationshipStatusBlocked  RelationshipStatus = "BLOCKED"
)

var AllRelationshipStatus = []RelationshipStatus{
	RelationshipStatusNone,
	RelationshipStatusPending,
	RelationshipStatusAccepted,
	RelationshipStatusDeclined,
	RelationshipStatusBlocked,
}

func (e RelationshipStatus) IsValid() bool {
	switch e {
	case RelationshipStatusNone, RelationshipStatusPending, RelationshipStatusAccepted, RelationshipStatusDeclined, RelationshipStatusBlocked:
		return true
	}
	return false
}

func (e RelationshipStatus) String() string {
	return string(e)
}

func (e *RelationshipStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationshipStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelationshipStatus", str)
	}
	return nil
}

func (e RelationshipStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelationshipType string

const (
	RelationshipTypeFriendship RelationshipType = "FRIENDSHIP"
	RelationshipTypeCoachship  RelationshipType = "COACHSHIP"
)

var AllRelationshipType = []RelationshipType{
	RelationshipTypeFriendship,
	RelationshipTypeCoachship,
}

func (e RelationshipType) IsValid() bool {
	switch e {
	case RelationshipTypeFriendship, RelationshipTypeCoachship:
		return true
	}
	return false
}

func (e RelationshipType) String() string {
	return string(e)
}

func (e *RelationshipType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationshipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelationshipType", str)
	}
	return nil
}

func (e RelationshipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
