package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt" // Add import for fmt

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
)

// Initiator is the resolver for the initiator field.
func (r *coachshipResolver) Initiator(ctx context.Context, obj *model.Coachship) (*model.User, error) {
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve initiator for nil coachship")
	}
	return &model.User{ID: obj.Initiator.ID}, nil
}

// Receiver is the resolver for the receiver field.
func (r *coachshipResolver) Receiver(ctx context.Context, obj *model.Coachship) (*model.User, error) {
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve receiver for nil coachship")
	}
	return &model.User{ID: obj.Receiver.ID}, nil
}

// Coach is the resolver for the coach field.
func (r *coachshipResolver) Coach(ctx context.Context, obj *model.Coachship) (*model.User, error) {
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve coach for nil coachship")
	}
	return &model.User{ID: obj.Coach.ID}, nil
}

// Student is the resolver for the student field.
func (r *coachshipResolver) Student(ctx context.Context, obj *model.Coachship) (*model.User, error) {
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve student for nil coachship")
	}
	return &model.User{ID: obj.Student.ID}, nil
}

// Coachship returns graph.CoachshipResolver implementation.
func (r *Resolver) Coachship() graph.CoachshipResolver { return &coachshipResolver{r} }

type coachshipResolver struct{ *Resolver }
