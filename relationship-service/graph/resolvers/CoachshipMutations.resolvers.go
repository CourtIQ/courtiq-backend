package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// RequestToBeCoachOf is the resolver for the requestToBeCoachOf field.
func (r *mutationResolver) RequestToBeCoachOf(ctx context.Context, userID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.RequestToBeCoachOf(ctx, userID)
}

// RequestToBeCoachedBy is the resolver for the requestToBeCoachedBy field.
func (r *mutationResolver) RequestToBeCoachedBy(ctx context.Context, userID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.RequestToBeCoachedBy(ctx, userID)
}

// AcceptToBeCoachOf is the resolver for the acceptToBeCoachOf field.
func (r *mutationResolver) AcceptToBeCoachOf(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.AcceptToBeCoachOf(ctx, requestID)
}

// RejectToBeCoachOf is the resolver for the rejectToBeCoachOf field.
func (r *mutationResolver) RejectToBeCoachOf(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.RejectToBeCoachOf(ctx, requestID)
}

// AcceptToBeCoachedBy is the resolver for the acceptToBeCoachedBy field.
func (r *mutationResolver) AcceptToBeCoachedBy(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.AcceptToBeCoachedBy(ctx, requestID)
}

// RejectToBeCoachedBy is the resolver for the rejectToBeCoachedBy field.
func (r *mutationResolver) RejectToBeCoachedBy(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.RejectToBeCoachedBy(ctx, requestID)
}

// CancelCoachRequest is the resolver for the cancelCoachRequest field.
func (r *mutationResolver) CancelCoachRequest(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.CancelCoachRequest(ctx, requestID)
}

// CancelStudentRequest is the resolver for the cancelStudentRequest field.
func (r *mutationResolver) CancelStudentRequest(ctx context.Context, requestID primitive.ObjectID) (*model.Coachship, error) {
	return r.RelationshipService.CancelStudentRequest(ctx, requestID)
}

// EndCoachingAsCoach is the resolver for the endCoachingAsCoach field.
func (r *mutationResolver) EndCoachingAsCoach(ctx context.Context, coachshipID primitive.ObjectID) (bool, error) {
	return r.RelationshipService.EndCoachingAsCoach(ctx, coachshipID)
}

// EndCoachingAsStudent is the resolver for the endCoachingAsStudent field.
func (r *mutationResolver) EndCoachingAsStudent(ctx context.Context, coachshipID primitive.ObjectID) (bool, error) {
	return r.RelationshipService.EndCoachingAsStudent(ctx, coachshipID)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
