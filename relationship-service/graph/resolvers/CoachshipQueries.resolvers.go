package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// IsCoachOf is the resolver for the isCoachOf field.
func (r *queryResolver) IsCoachOf(ctx context.Context, userID primitive.ObjectID) (model.RelationshipStatus, error) {
	return r.RelationshipService.IsCoachOf(ctx, userID)
}

// IsStudentOf is the resolver for the isStudentOf field.
func (r *queryResolver) IsStudentOf(ctx context.Context, userID primitive.ObjectID) (model.RelationshipStatus, error) {
	return r.RelationshipService.IsStudentOf(ctx, userID)
}

// GetCoachships is the resolver for the getCoachships field.
func (r *queryResolver) GetCoachships(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetCoachships(ctx, limit, offset)
}

// GetMyCoaches is the resolver for the getMyCoaches field.
func (r *queryResolver) GetMyCoaches(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetMyCoaches(ctx, limit, offset)
}

// GetMyStudents is the resolver for the getMyStudents field.
func (r *queryResolver) GetMyStudents(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetMyStudents(ctx, limit, offset)
}

// GetSentCoachRequests is the resolver for the getSentCoachRequests field.
func (r *queryResolver) GetSentCoachRequests(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetSentCoachRequests(ctx, limit, offset)
}

// GetReceivedCoachRequests is the resolver for the getReceivedCoachRequests field.
func (r *queryResolver) GetReceivedCoachRequests(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetReceivedCoachRequests(ctx, limit, offset)
}

// GetSentStudentRequests is the resolver for the getSentStudentRequests field.
func (r *queryResolver) GetSentStudentRequests(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetSentStudentRequests(ctx, limit, offset)
}

// GetReceivedStudentRequests is the resolver for the getReceivedStudentRequests field.
func (r *queryResolver) GetReceivedStudentRequests(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	return r.RelationshipService.GetReceivedStudentRequests(ctx, limit, offset)
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
