package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
)

// Coachship is the resolver for the coachship field.
func (r *queryResolver) Coachship(ctx context.Context, id string) (*model.Coachship, error) {
	return r.RelationshipService.GetCoachship(ctx, id)
}

// Coaches is the resolver for the coaches field.
func (r *queryResolver) Coaches(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	limitVal := resolveLimit(limit)
	offsetVal := resolveOffset(offset)
	return r.RelationshipService.ListCoaches(ctx, &limitVal, &offsetVal)
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context, limit *int, offset *int) ([]*model.Coachship, error) {
	limitVal := resolveLimit(limit)
	offsetVal := resolveOffset(offset)
	return r.RelationshipService.ListStudents(ctx, &limitVal, &offsetVal)
}

// SentCoacheeRequests is the resolver for the sentCoacheeRequests field.
func (r *queryResolver) SentCoacheeRequests(ctx context.Context) ([]*model.Coachship, error) {
	return r.RelationshipService.ListSentCoacheeRequests(ctx)
}

// ReceivedCoachRequests is the resolver for the receivedCoachRequests field.
func (r *queryResolver) ReceivedCoachRequests(ctx context.Context) ([]*model.Coachship, error) {
	return r.RelationshipService.ListReceivedCoachRequests(ctx)
}

// SentCoachRequests is the resolver for the sentCoachRequests field.
func (r *queryResolver) SentCoachRequests(ctx context.Context) ([]*model.Coachship, error) {
	return r.RelationshipService.ListSentCoachRequests(ctx)
}

// ReceivedCoacheeRequests is the resolver for the receivedCoacheeRequests field.
func (r *queryResolver) ReceivedCoacheeRequests(ctx context.Context) ([]*model.Coachship, error) {
	return r.RelationshipService.ListReceivedCoacheeRequests(ctx)
}

// CoachshipStatus is the resolver for the coachshipStatus field.
func (r *queryResolver) CoachshipStatus(ctx context.Context, otherUserID string) (*model.RelationshipStatus, error) {
	return r.RelationshipService.CheckCoachshipStatus(ctx, otherUserID)
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// Helper functions for pagination defaults
func resolveLimit(limit *int) int {
	if limit != nil {
		return *limit
	}
	return 10 // Default limit
}

func resolveOffset(offset *int) int {
	if offset != nil {
		return *offset
	}
	return 0 // Default offset
}
