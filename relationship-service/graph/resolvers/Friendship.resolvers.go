package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
)

// Initiator is the resolver for the initiator field.
// It should return a User object containing only the ID.
func (r *friendshipResolver) Initiator(ctx context.Context, obj *model.Friendship) (*model.User, error) {
	// Return a User stub containing only the ID stored in the Friendship object.
	// The gateway will resolve the full User details from the user-service.
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve initiator for nil friendship")
	}
	return &model.User{ID: obj.Initiator.ID}, nil
}

// Receiver is the resolver for the receiver field.
// It should return a User object containing only the ID.
func (r *friendshipResolver) Receiver(ctx context.Context, obj *model.Friendship) (*model.User, error) {
	// Return a User stub containing only the ID stored in the Friendship object.
	if obj == nil {
		return nil, fmt.Errorf("cannot resolve receiver for nil friendship")
	}
	return &model.User{ID: obj.Receiver.ID}, nil
}

// Friendship returns graph.FriendshipResolver implementation.
func (r *Resolver) Friendship() graph.FriendshipResolver { return &friendshipResolver{r} }

type friendshipResolver struct{ *Resolver }
