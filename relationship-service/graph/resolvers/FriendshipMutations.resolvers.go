package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// SendFriendRequest is the resolver for the sendFriendRequest field.
func (r *mutationResolver) SendFriendRequest(ctx context.Context, userID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.SendFriendRequest(ctx, userID)
}

// AcceptFriendRequest is the resolver for the acceptFriendRequest field.
func (r *mutationResolver) AcceptFriendRequest(ctx context.Context, requestID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.AcceptFriendRequest(ctx, requestID)
}

// RejectFriendRequest is the resolver for the rejectFriendRequest field.
func (r *mutationResolver) RejectFriendRequest(ctx context.Context, requestID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.RejectFriendRequest(ctx, requestID)
}

// CancelFriendRequest is the resolver for the cancelFriendRequest field.
func (r *mutationResolver) CancelFriendRequest(ctx context.Context, requestID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.CancelFriendRequest(ctx, requestID)
}

// RemoveFriend is the resolver for the removeFriend field.
func (r *mutationResolver) RemoveFriend(ctx context.Context, friendID primitive.ObjectID) (bool, error) {
	return r.RelationshipService.RemoveFriend(ctx, friendID)
}

// BlockUser is the resolver for the blockUser field.
func (r *mutationResolver) BlockUser(ctx context.Context, userID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.BlockUser(ctx, userID)
}

// UnblockUser is the resolver for the unblockUser field.
func (r *mutationResolver) UnblockUser(ctx context.Context, userID primitive.ObjectID) (*model.Friendship, error) {
	return r.RelationshipService.UnblockUser(ctx, userID)
}
