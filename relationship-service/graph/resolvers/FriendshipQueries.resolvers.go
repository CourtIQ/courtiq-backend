package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/CourtIQ/courtiq-backend/relationship-service/graph"
	"github.com/CourtIQ/courtiq-backend/relationship-service/graph/model"
)

// GetFriendship is the resolver for the getFriendship field.
func (r *queryResolver) GetFriendship(ctx context.Context, id string) (*model.Friendship, error) {
	panic(fmt.Errorf("not implemented: GetFriendship - getFriendship"))
}

// GetFriendships is the resolver for the getFriendships field.
func (r *queryResolver) GetFriendships(ctx context.Context, input model.FriendshipsInput) ([]*model.Friendship, error) {
	panic(fmt.Errorf("not implemented: GetFriendships - getFriendships"))
}

// GetPendingFriendRequests is the resolver for the getPendingFriendRequests field.
func (r *queryResolver) GetPendingFriendRequests(ctx context.Context, userID string) ([]*model.Friendship, error) {
	panic(fmt.Errorf("not implemented: GetPendingFriendRequests - getPendingFriendRequests"))
}

// GetSentFriendRequests is the resolver for the getSentFriendRequests field.
func (r *queryResolver) GetSentFriendRequests(ctx context.Context, userID string) ([]*model.Friendship, error) {
	panic(fmt.Errorf("not implemented: GetSentFriendRequests - getSentFriendRequests"))
}

// CheckFriendshipStatus is the resolver for the checkFriendshipStatus field.
func (r *queryResolver) CheckFriendshipStatus(ctx context.Context, user1Id string, user2Id string) (*model.Friendship, error) {
	panic(fmt.Errorf("not implemented: CheckFriendshipStatus - checkFriendshipStatus"))
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
