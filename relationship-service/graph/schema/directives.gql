input ExistenceConditions {
  """
  Indicates that a relationship with the given status must exist.
  For example: PENDING or ACTIVE.
  """
  relationshipStatus: RelationshipStatus

  """
  Indicates that a relationship of a given type must exist.
  For example: FRIENDSHIP or COACHSHIP.
  """
  relationshipType: RelationshipType
}

input RoleConditions {
  """
  If true, checks that the current user is one of the participants in the relationship.
  Applies to operations that require both parties (like ending a FRIENDSHIP).
  """
  requireParticipants: Boolean

  """
  If true, checks that the current user matches the 'sender' role in a pending relationship,
  often used when canceling or managing a request they initiated.
  """
  requireSender: Boolean

  """
  If true, checks that the current user matches the 'receiver' role in a pending relationship,
  often used when accepting or rejecting a request they received.
  """
  requireReceiver: Boolean

  """
  If true, checks that the current user is in a 'student' role for a COACHSHIP relationship.
  Used in operations that only a student can perform (like accepting a coach request).
  """
  requireStudent: Boolean

  """
  If true, checks that the current user is in a 'coach' role for a COACHSHIP relationship.
  Used in operations that only a coach can perform (like removing a student or accepting a student request).
  """
  requireCoach: Boolean
}

input NonExistenceConditions {
  """
  If true, ensures that no existing friendship (active or pending) exists between the current user
  and the specified other user. This is commonly used before sending a new friend request
  to prevent duplicates.
  """
  noExistingFriendship: Boolean

  """
  If true, ensures that no existing COACHSHIP relationship (active or pending) exists where
  the current user is already the coach of the specified user. Used before requesting to be a coach
  to avoid duplicates.
  """
  notExistingCoach: Boolean

  """
  If true, ensures that no existing COACHSHIP relationship (active or pending) exists where
  the current user is already the student of the specified user. Used before requesting to be a student
  to avoid duplicates.
  """
  notExistingStudent: Boolean
}

input SatisfiesConditions {
  """
  Conditions that require certain types of relationships with specific statuses to exist.
  If provided, the directive checks that such a relationship is found.
  """
  existence: ExistenceConditions

  """
  Conditions that require the current user to hold a certain role (e.g., sender, receiver, coach, student)
  in the existing relationship. If provided, the directive checks the user's role against the relationship.
  """
  roles: RoleConditions

  """
  Conditions that require certain relationships NOT to exist. If provided, the directive verifies
  that no such relationship (friendship or coachship) is present between the current user and another user.
  """
  nonExistence: NonExistenceConditions
}

"""
A directive that checks whether certain relationship or role conditions are satisfied before allowing
the associated field (often a mutation) to proceed. If conditions are not met, it returns an error,
preventing the resolver from running.
"""
directive @satisfies(conditions: SatisfiesConditions!) on FIELD_DEFINITION
