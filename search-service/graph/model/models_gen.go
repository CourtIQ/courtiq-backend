// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type SearchResult interface {
	IsSearchResult()
}

// Provides structured geographical details about a user's location.
// All fields are optional and can be omitted if unknown.
type Location struct {
	City      *string  `json:"city,omitempty" bson:"city,omitempty"`
	State     *string  `json:"state,omitempty" bson:"state,omitempty"`
	Country   *string  `json:"country,omitempty" bson:"country,omitempty"`
	Latitude  *float64 `json:"latitude,omitempty" bson:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty" bson:"longitude,omitempty"`
}

type Query struct {
}

type UserSearchResult struct {
	ID             primitive.ObjectID `json:"id" bson:"_id"`
	Username       string             `json:"username" bson:"username"`
	DisplayName    *string            `json:"displayName,omitempty" bson:"displayName,omitempty"`
	FirstName      *string            `json:"firstName,omitempty" bson:"firstName,omitempty"`
	LastName       *string            `json:"lastName,omitempty" bson:"lastName,omitempty"`
	ProfilePicture *string            `json:"profilePicture,omitempty" bson:"profilePicture,omitempty"`
	Location       *Location          `json:"location,omitempty" bson:"location,omitempty"`
}

func (UserSearchResult) IsSearchResult() {}

type ResourceType string

const (
	ResourceTypeUser ResourceType = "USER"
)

var AllResourceType = []ResourceType{
	ResourceTypeUser,
}

func (e ResourceType) IsValid() bool {
	switch e {
	case ResourceTypeUser:
		return true
	}
	return false
}

func (e ResourceType) String() string {
	return string(e)
}

func (e *ResourceType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceType", str)
	}
	return nil
}

func (e ResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Visibility string

const (
	VisibilityPublic  Visibility = "PUBLIC"
	VisibilityPrivate Visibility = "PRIVATE"
	VisibilityFriends Visibility = "FRIENDS"
	VisibilityCoaches Visibility = "COACHES"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityPrivate,
	VisibilityFriends,
	VisibilityCoaches,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityPrivate, VisibilityFriends, VisibilityCoaches:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
