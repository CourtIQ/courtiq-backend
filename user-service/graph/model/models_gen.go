// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Provides structured geographical details about a user's location.
// All fields are optional and can be omitted if unknown.
type Location struct {
	City      *string  `json:"city,omitempty"`
	State     *string  `json:"state,omitempty"`
	Country   *string  `json:"country,omitempty"`
	Latitude  *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
}

type LocationInput struct {
	City      *string  `json:"city,omitempty"`
	State     *string  `json:"state,omitempty"`
	Country   *string  `json:"country,omitempty"`
	Latitude  *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateUserInput struct {
	Username    *string        `json:"username,omitempty"`
	FirstName   *string        `json:"firstName,omitempty"`
	LastName    *string        `json:"lastName,omitempty"`
	Gender      *Gender        `json:"gender,omitempty"`
	DateOfBirth *time.Time     `json:"dateOfBirth,omitempty"`
	Bio         *string        `json:"bio,omitempty"`
	Location    *LocationInput `json:"location,omitempty"`
}

// Represents an individual user within the application.
// Implements a federated key for cross-service references.
type User struct {
	ID             primitive.ObjectID `json:"id" bson:"_id"`
	FirebaseID     string             `json:"firebaseId"`
	Email          string             `json:"email"`
	FirstName      *string            `json:"firstName,omitempty"`
	LastName       *string            `json:"lastName,omitempty"`
	DisplayName    *string            `json:"displayName,omitempty"`
	Username       *string            `json:"username,omitempty"`
	Gender         *Gender            `json:"gender,omitempty"`
	ProfilePicture *string            `json:"profilePicture,omitempty"`
	DateOfBirth    *time.Time         `json:"dateOfBirth,omitempty"`
	Bio            *string            `json:"bio,omitempty"`
	Location       *Location          `json:"location,omitempty"`
	Rating         *int               `json:"rating,omitempty"`
	CreatedAt      *time.Time         `json:"createdAt,omitempty"`
	LastUpdated    *time.Time         `json:"lastUpdated,omitempty"`
}

func (User) IsEntity() {}

type Gender string

const (
	GenderMale           Gender = "MALE"
	GenderFemale         Gender = "FEMALE"
	GenderNonBinary      Gender = "NON_BINARY"
	GenderPreferNotToSay Gender = "PREFER_NOT_TO_SAY"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderNonBinary,
	GenderPreferNotToSay,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderNonBinary, GenderPreferNotToSay:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
